
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  00002b76  00002c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800120  00800120  00002cca  2**0
                  ALLOC
  3 .stab         00002b8c  00000000  00000000  00002ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000188e  00000000  00000000  00005858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000070e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007226  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000add8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 15 	call	0x2a20	; 0x2a20 <main>
      8a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e0       	ldi	r26, 0x0B	; 11
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e0       	ldi	r24, 0x0B	; 11
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void UART_init(UART_ConfigType * config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	/* calculate the value of the UBRR register to setup the baud rate */
	uint16 ubrrValue = (uint16)((F_CPU / (8UL * config->baudrate)) - 1);
     b56:	eb 81       	ldd	r30, Y+3	; 0x03
     b58:	fc 81       	ldd	r31, Y+4	; 0x04
     b5a:	83 81       	ldd	r24, Z+3	; 0x03
     b5c:	94 81       	ldd	r25, Z+4	; 0x04
     b5e:	a5 81       	ldd	r26, Z+5	; 0x05
     b60:	b6 81       	ldd	r27, Z+6	; 0x06
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	aa 1f       	adc	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	9c 01       	movw	r18, r24
     b7c:	ad 01       	movw	r20, r26
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	92 e1       	ldi	r25, 0x12	; 18
     b82:	aa e7       	ldi	r26, 0x7A	; 122
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	bc 01       	movw	r22, r24
     b88:	cd 01       	movw	r24, r26
     b8a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__udivmodsi4>
     b8e:	da 01       	movw	r26, r20
     b90:	c9 01       	movw	r24, r18
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	9a 83       	std	Y+2, r25	; 0x02
     b96:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b98:	eb e2       	ldi	r30, 0x2B	; 43
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	80 83       	st	Z, r24
	* RXEN  = 1 Receiver Enable
	* RXEN  = 1 Transmitter Enable
	* UCSZ2 = 0 For 8-bit data mode
	* RXB8 & TXB8 not used for 8-bit data mode
	***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     ba0:	ea e2       	ldi	r30, 0x2A	; 42
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	88 e1       	ldi	r24, 0x18	; 24
     ba6:	80 83       	st	Z, r24

	/* URSEL   = 1 The URSEL must be one when writing the UCSRC */
	UCSRC = (1<<URSEL);
     ba8:	e0 e4       	ldi	r30, 0x40	; 64
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	80 83       	st	Z, r24

	/* Setup parity bit */
	UCSRC = (UCSRC&0xCF) | ((config->parity&0x03)<<4);
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	28 2f       	mov	r18, r24
     bbc:	2f 7c       	andi	r18, 0xCF	; 207
     bbe:	eb 81       	ldd	r30, Y+3	; 0x03
     bc0:	fc 81       	ldd	r31, Y+4	; 0x04
     bc2:	80 81       	ld	r24, Z
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	83 70       	andi	r24, 0x03	; 3
     bca:	90 70       	andi	r25, 0x00	; 0
     bcc:	82 95       	swap	r24
     bce:	92 95       	swap	r25
     bd0:	90 7f       	andi	r25, 0xF0	; 240
     bd2:	98 27       	eor	r25, r24
     bd4:	80 7f       	andi	r24, 0xF0	; 240
     bd6:	98 27       	eor	r25, r24
     bd8:	82 2b       	or	r24, r18
     bda:	8c 93       	st	X, r24

	/* Setup Number of stop bits */
	UCSRC = (UCSRC&0xF7) | ((config->stopbit&0x01)<<3);
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	28 2f       	mov	r18, r24
     be8:	27 7f       	andi	r18, 0xF7	; 247
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	81 81       	ldd	r24, Z+1	; 0x01
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	81 70       	andi	r24, 0x01	; 1
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	82 2b       	or	r24, r18
     c06:	8c 93       	st	X, r24

	/* Setup Number of Data Bits */
	UCSRC = (UCSRC&0xF9) | ((config->databits&0x03)<<1);
     c08:	a0 e4       	ldi	r26, 0x40	; 64
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e0 e4       	ldi	r30, 0x40	; 64
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	28 2f       	mov	r18, r24
     c14:	29 7f       	andi	r18, 0xF9	; 249
     c16:	eb 81       	ldd	r30, Y+3	; 0x03
     c18:	fc 81       	ldd	r31, Y+4	; 0x04
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	83 70       	andi	r24, 0x03	; 3
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	82 2b       	or	r24, r18
     c2a:	8c 93       	st	X, r24

	/* Setup baudrate */
	UBRRH = (uint8)(ubrrValue >> 8);
     c2c:	e0 e4       	ldi	r30, 0x40	; 64
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	89 2f       	mov	r24, r25
     c36:	99 27       	eor	r25, r25
     c38:	80 83       	st	Z, r24
	UBRRL = (uint8)ubrrValue;
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	80 83       	st	Z, r24
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <UART_sendByte>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void UART_sendByte(uint8 data)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	* transmitting a new byte so wait until this flag is set to one
	*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	80 72       	andi	r24, 0x20	; 32
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	b9 f3       	breq	.-18     	; 0xc5c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <UART_receiveByte>:
[out]	 -NONE
[in/out] -NONE
[Returns]: the data received through UART
------------------------------------------------------------------*/
uint8 UART_receiveByte(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	dc f7       	brge	.-10     	; 0xc86 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     c90:	ec e2       	ldi	r30, 0x2C	; 44
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <UART_sendString>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void UART_sendString(const uint8 * str)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <UART_sendString+0x6>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <UART_sendString+0x24>
	/* Send the whole string */
	while(*str != '\0')
	{
		UART_sendByte(*str);
     cac:	e9 81       	ldd	r30, Y+1	; 0x01
     cae:	fa 81       	ldd	r31, Y+2	; 0x02
     cb0:	80 81       	ld	r24, Z
     cb2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
		str++;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
[Returns]: Nothing
------------------------------------------------------------------*/
void UART_sendString(const uint8 * str)
{
	/* Send the whole string */
	while(*str != '\0')
     cc0:	e9 81       	ldd	r30, Y+1	; 0x01
     cc2:	fa 81       	ldd	r31, Y+2	; 0x02
     cc4:	80 81       	ld	r24, Z
     cc6:	88 23       	and	r24, r24
     cc8:	89 f7       	brne	.-30     	; 0xcac <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <UART_receiveString>:
[out]	 -NONE
[in/out] -NONE
[Returns]: the string received through UART
------------------------------------------------------------------*/
void UART_receiveString(uint8 * str)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <UART_receiveString+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01

	/* Receive the first byte */
	*str = UART_receiveByte();
     ce2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_receiveByte>
     ce6:	e9 81       	ldd	r30, Y+1	; 0x01
     ce8:	fa 81       	ldd	r31, Y+2	; 0x02
     cea:	80 83       	st	Z, r24
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <UART_receiveString+0x2e>

	/* Receive the whole string until the '#' */
	while(*str != '#')
	{
		str++;
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
		*str = UART_receiveByte();
     cf8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_receiveByte>
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	80 83       	st	Z, r24

	/* Receive the first byte */
	*str = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(*str != '#')
     d02:	e9 81       	ldd	r30, Y+1	; 0x01
     d04:	fa 81       	ldd	r31, Y+2	; 0x02
     d06:	80 81       	ld	r24, Z
     d08:	83 32       	cpi	r24, 0x23	; 35
     d0a:	89 f7       	brne	.-30     	; 0xcee <UART_receiveString+0x1a>
	{
		str++;
		*str = UART_receiveByte();

	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	ef 93       	push	r30
     d36:	ff 93       	push	r31
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     d40:	80 91 20 01 	lds	r24, 0x0120
     d44:	90 91 21 01 	lds	r25, 0x0121
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	29 f0       	breq	.+10     	; 0xd56 <__vector_7+0x40>
	{
		(* g_callBackPtr)();
     d4c:	e0 91 20 01 	lds	r30, 0x0120
     d50:	f0 91 21 01 	lds	r31, 0x0121
     d54:	09 95       	icall
	}
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     da6:	80 91 20 01 	lds	r24, 0x0120
     daa:	90 91 21 01 	lds	r25, 0x0121
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	29 f0       	breq	.+10     	; 0xdbc <__vector_9+0x40>
	{
		(* g_callBackPtr)();
     db2:	e0 91 20 01 	lds	r30, 0x0120
     db6:	f0 91 21 01 	lds	r31, 0x0121
     dba:	09 95       	icall
	}
}
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <Timer1_init>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void Timer1_init(const Timer1_ConfigType * config)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <Timer1_init+0x6>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
	if(config->mode == NORMAL_MODE)
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	85 81       	ldd	r24, Z+5	; 0x05
     df6:	88 23       	and	r24, r24
     df8:	29 f4       	brne	.+10     	; 0xe04 <Timer1_init+0x22>
	{
		TCCR1A = 0x0C;
     dfa:	ef e4       	ldi	r30, 0x4F	; 79
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	8c e0       	ldi	r24, 0x0C	; 12
     e00:	80 83       	st	Z, r24
     e02:	11 c0       	rjmp	.+34     	; 0xe26 <Timer1_init+0x44>
	}
	else
	{
		/* compare mode configurations */
		TCCR1A = 0x0C;
     e04:	ef e4       	ldi	r30, 0x4F	; 79
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8c e0       	ldi	r24, 0x0C	; 12
     e0a:	80 83       	st	Z, r24
		TCCR1B = 0x08;
     e0c:	ee e4       	ldi	r30, 0x4E	; 78
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	88 e0       	ldi	r24, 0x08	; 8
     e12:	80 83       	st	Z, r24
		OCR1A = config->compare_value;
     e14:	aa e4       	ldi	r26, 0x4A	; 74
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e9 81       	ldd	r30, Y+1	; 0x01
     e1a:	fa 81       	ldd	r31, Y+2	; 0x02
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
	}
	/* sets initial value in TCNT1 register */
	TCNT1 = config->initial_value;
     e26:	ac e4       	ldi	r26, 0x4C	; 76
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 81       	ldd	r30, Y+1	; 0x01
     e2c:	fa 81       	ldd	r31, Y+2	; 0x02
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24

	/* setup prescaller */
	TCCR1B = (TCCR1B & 0xF8) | (config->prescaler & 0x07);
     e38:	ae e4       	ldi	r26, 0x4E	; 78
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ee e4       	ldi	r30, 0x4E	; 78
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	98 2f       	mov	r25, r24
     e44:	98 7f       	andi	r25, 0xF8	; 248
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	84 81       	ldd	r24, Z+4	; 0x04
     e4c:	87 70       	andi	r24, 0x07	; 7
     e4e:	89 2b       	or	r24, r25
     e50:	8c 93       	st	X, r24

	if(config->mode == NORMAL_MODE)
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	85 81       	ldd	r24, Z+5	; 0x05
     e58:	88 23       	and	r24, r24
     e5a:	29 f4       	brne	.+10     	; 0xe66 <Timer1_init+0x84>
	{
		/* Enable Over Flow interrupt for Normal mode configurations */
		TIMSK = (1<<TOIE1);
     e5c:	e9 e5       	ldi	r30, 0x59	; 89
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	80 83       	st	Z, r24
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <Timer1_init+0x8c>
	}
	else
	{
		/* Enable Compare interrupt for Compare mode configurations */
		TIMSK = (1<<OCIE1A);
     e66:	e9 e5       	ldi	r30, 0x59	; 89
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 e1       	ldi	r24, 0x10	; 16
     e6c:	80 83       	st	Z, r24
	}
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <Timer1_deInit>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void Timer1_deInit(void)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 */
	TCCR1B = 0;
     e80:	ee e4       	ldi	r30, 0x4E	; 78
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	10 82       	st	Z, r1
	TCCR1A = 0;
     e86:	ef e4       	ldi	r30, 0x4F	; 79
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	10 82       	st	Z, r1
	TCCR1B = 0;
     e8c:	ee e4       	ldi	r30, 0x4E	; 78
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	10 82       	st	Z, r1
	OCR1A = 0;
     e92:	ea e4       	ldi	r30, 0x4A	; 74
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	11 82       	std	Z+1, r1	; 0x01
     e98:	10 82       	st	Z, r1
	TCNT1 = 0;
     e9a:	ec e4       	ldi	r30, 0x4C	; 76
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	10 82       	st	Z, r1
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <Timer1_setCallBack>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <Timer1_setCallBack+0x6>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	90 93 21 01 	sts	0x0121, r25
     ebe:	80 93 20 01 	sts	0x0120, r24
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <GPIO_setupPinDirection>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <GPIO_setupPinDirection+0x6>
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <GPIO_setupPinDirection+0x8>
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	6a 83       	std	Y+2, r22	; 0x02
     ede:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <GPIO_setupPinDirection+0x1c>
     ee6:	d5 c0       	rjmp	.+426    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	08 f0       	brcs	.+2      	; 0xef0 <GPIO_setupPinDirection+0x24>
     eee:	d1 c0       	rjmp	.+418    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/* Setup the pin direction as required*/
		switch(port_num)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	3d 83       	std	Y+5, r19	; 0x05
     ef8:	2c 83       	std	Y+4, r18	; 0x04
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <GPIO_setupPinDirection+0x3a>
     f04:	43 c0       	rjmp	.+134    	; 0xf8c <GPIO_setupPinDirection+0xc0>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	2c f4       	brge	.+10     	; 0xf1a <GPIO_setupPinDirection+0x4e>
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	71 f0       	breq	.+28     	; 0xf34 <GPIO_setupPinDirection+0x68>
     f18:	bc c0       	rjmp	.+376    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
     f1a:	2c 81       	ldd	r18, Y+4	; 0x04
     f1c:	3d 81       	ldd	r19, Y+5	; 0x05
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <GPIO_setupPinDirection+0x5a>
     f24:	5f c0       	rjmp	.+190    	; 0xfe4 <GPIO_setupPinDirection+0x118>
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <GPIO_setupPinDirection+0x66>
     f30:	85 c0       	rjmp	.+266    	; 0x103c <GPIO_setupPinDirection+0x170>
     f32:	af c0       	rjmp	.+350    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f3a:	aa e3       	ldi	r26, 0x3A	; 58
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e3       	ldi	r30, 0x3A	; 58
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <GPIO_setupPinDirection+0x8c>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <GPIO_setupPinDirection+0x88>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	98 c0       	rjmp	.+304    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f62:	aa e3       	ldi	r26, 0x3A	; 58
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ea e3       	ldi	r30, 0x3A	; 58
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_setupPinDirection+0xb4>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_setupPinDirection+0xb0>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	83 c0       	rjmp	.+262    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	a1 f4       	brne	.+40     	; 0xfba <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f92:	a7 e3       	ldi	r26, 0x37	; 55
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e7 e3       	ldi	r30, 0x37	; 55
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_setupPinDirection+0xe4>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_setupPinDirection+0xe0>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	6c c0       	rjmp	.+216    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fba:	a7 e3       	ldi	r26, 0x37	; 55
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e3       	ldi	r30, 0x37	; 55
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_setupPinDirection+0x10c>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_setupPinDirection+0x108>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	57 c0       	rjmp	.+174    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	a1 f4       	brne	.+40     	; 0x1012 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fea:	a4 e3       	ldi	r26, 0x34	; 52
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e4 e3       	ldi	r30, 0x34	; 52
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_setupPinDirection+0x13c>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_setupPinDirection+0x138>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	40 c0       	rjmp	.+128    	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1012:	a4 e3       	ldi	r26, 0x34	; 52
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e4 e3       	ldi	r30, 0x34	; 52
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_setupPinDirection+0x164>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_setupPinDirection+0x160>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	2b c0       	rjmp	.+86     	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	a1 f4       	brne	.+40     	; 0x106a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1042:	a1 e3       	ldi	r26, 0x31	; 49
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e1 e3       	ldi	r30, 0x31	; 49
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <GPIO_setupPinDirection+0x194>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <GPIO_setupPinDirection+0x190>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    106a:	a1 e3       	ldi	r26, 0x31	; 49
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e1 e3       	ldi	r30, 0x31	; 49
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <GPIO_setupPinDirection+0x1bc>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <GPIO_setupPinDirection+0x1b8>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <GPIO_writePin>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <GPIO_writePin+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <GPIO_writePin+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	6a 83       	std	Y+2, r22	; 0x02
    10b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	84 30       	cpi	r24, 0x04	; 4
    10ba:	08 f0       	brcs	.+2      	; 0x10be <GPIO_writePin+0x1c>
    10bc:	d5 c0       	rjmp	.+426    	; 0x1268 <GPIO_writePin+0x1c6>
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	88 30       	cpi	r24, 0x08	; 8
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <GPIO_writePin+0x24>
    10c4:	d1 c0       	rjmp	.+418    	; 0x1268 <GPIO_writePin+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/*Write the pin value as required*/
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3d 83       	std	Y+5, r19	; 0x05
    10ce:	2c 83       	std	Y+4, r18	; 0x04
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <GPIO_writePin+0x3a>
    10da:	43 c0       	rjmp	.+134    	; 0x1162 <GPIO_writePin+0xc0>
    10dc:	2c 81       	ldd	r18, Y+4	; 0x04
    10de:	3d 81       	ldd	r19, Y+5	; 0x05
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <GPIO_writePin+0x4e>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	71 f0       	breq	.+28     	; 0x110a <GPIO_writePin+0x68>
    10ee:	bc c0       	rjmp	.+376    	; 0x1268 <GPIO_writePin+0x1c6>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <GPIO_writePin+0x5a>
    10fa:	5f c0       	rjmp	.+190    	; 0x11ba <GPIO_writePin+0x118>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	09 f4       	brne	.+2      	; 0x1108 <GPIO_writePin+0x66>
    1106:	85 c0       	rjmp	.+266    	; 0x1212 <GPIO_writePin+0x170>
    1108:	af c0       	rjmp	.+350    	; 0x1268 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	a1 f4       	brne	.+40     	; 0x1138 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1110:	ab e3       	ldi	r26, 0x3B	; 59
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_writePin+0x8c>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_writePin+0x88>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	98 c0       	rjmp	.+304    	; 0x1268 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1138:	ab e3       	ldi	r26, 0x3B	; 59
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_writePin+0xb4>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_writePin+0xb0>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	83 c0       	rjmp	.+262    	; 0x1268 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	a1 f4       	brne	.+40     	; 0x1190 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1168:	a8 e3       	ldi	r26, 0x38	; 56
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e8 e3       	ldi	r30, 0x38	; 56
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <GPIO_writePin+0xe4>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <GPIO_writePin+0xe0>
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	6c c0       	rjmp	.+216    	; 0x1268 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1190:	a8 e3       	ldi	r26, 0x38	; 56
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e3       	ldi	r30, 0x38	; 56
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_writePin+0x10c>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_writePin+0x108>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	57 c0       	rjmp	.+174    	; 0x1268 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	a1 f4       	brne	.+40     	; 0x11e8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11c0:	a5 e3       	ldi	r26, 0x35	; 53
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e3       	ldi	r30, 0x35	; 53
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_writePin+0x13c>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_writePin+0x138>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	40 c0       	rjmp	.+128    	; 0x1268 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11e8:	a5 e3       	ldi	r26, 0x35	; 53
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e3       	ldi	r30, 0x35	; 53
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_writePin+0x164>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_writePin+0x160>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	2b c0       	rjmp	.+86     	; 0x1268 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	a1 f4       	brne	.+40     	; 0x1240 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1218:	a2 e3       	ldi	r26, 0x32	; 50
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e3       	ldi	r30, 0x32	; 50
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <GPIO_writePin+0x194>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <GPIO_writePin+0x190>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1240:	a2 e3       	ldi	r26, 0x32	; 50
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e2 e3       	ldi	r30, 0x32	; 50
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <GPIO_writePin+0x1bc>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <GPIO_writePin+0x1b8>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <GPIO_readPin>:
[out]	-NONE
[in/out] -NONE
[Returns]: the value of the pin in a uint8 variable
------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <GPIO_readPin+0x6>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_readPin+0x8>
    1280:	0f 92       	push	r0
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    128a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	08 f0       	brcs	.+2      	; 0x1294 <GPIO_readPin+0x1c>
    1292:	6b c0       	rjmp	.+214    	; 0x136a <GPIO_readPin+0xf2>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <GPIO_readPin+0x24>
    129a:	67 c0       	rjmp	.+206    	; 0x136a <GPIO_readPin+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the selected pin */
		switch(port_num)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3d 83       	std	Y+5, r19	; 0x05
    12a4:	2c 83       	std	Y+4, r18	; 0x04
    12a6:	4c 81       	ldd	r20, Y+4	; 0x04
    12a8:	5d 81       	ldd	r21, Y+5	; 0x05
    12aa:	41 30       	cpi	r20, 0x01	; 1
    12ac:	51 05       	cpc	r21, r1
    12ae:	41 f1       	breq	.+80     	; 0x1300 <GPIO_readPin+0x88>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	34 f4       	brge	.+12     	; 0x12c6 <GPIO_readPin+0x4e>
    12ba:	2c 81       	ldd	r18, Y+4	; 0x04
    12bc:	3d 81       	ldd	r19, Y+5	; 0x05
    12be:	21 15       	cp	r18, r1
    12c0:	31 05       	cpc	r19, r1
    12c2:	61 f0       	breq	.+24     	; 0x12dc <GPIO_readPin+0x64>
    12c4:	52 c0       	rjmp	.+164    	; 0x136a <GPIO_readPin+0xf2>
    12c6:	4c 81       	ldd	r20, Y+4	; 0x04
    12c8:	5d 81       	ldd	r21, Y+5	; 0x05
    12ca:	42 30       	cpi	r20, 0x02	; 2
    12cc:	51 05       	cpc	r21, r1
    12ce:	51 f1       	breq	.+84     	; 0x1324 <GPIO_readPin+0xac>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	b9 f1       	breq	.+110    	; 0x1348 <GPIO_readPin+0xd0>
    12da:	47 c0       	rjmp	.+142    	; 0x136a <GPIO_readPin+0xf2>
		{
		case PORTA_ID:
			value = GET_BIT(PINA,pin_num);
    12dc:	e9 e3       	ldi	r30, 0x39	; 57
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_readPin+0x7c>
    12f0:	55 95       	asr	r21
    12f2:	47 95       	ror	r20
    12f4:	8a 95       	dec	r24
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_readPin+0x78>
    12f8:	ca 01       	movw	r24, r20
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	35 c0       	rjmp	.+106    	; 0x136a <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			value = GET_BIT(PINB,pin_num);
    1300:	e6 e3       	ldi	r30, 0x36	; 54
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_readPin+0xa0>
    1314:	55 95       	asr	r21
    1316:	47 95       	ror	r20
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_readPin+0x9c>
    131c:	ca 01       	movw	r24, r20
    131e:	81 70       	andi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	23 c0       	rjmp	.+70     	; 0x136a <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			value = GET_BIT(PINC,pin_num);
    1324:	e3 e3       	ldi	r30, 0x33	; 51
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_readPin+0xc4>
    1338:	55 95       	asr	r21
    133a:	47 95       	ror	r20
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_readPin+0xc0>
    1340:	ca 01       	movw	r24, r20
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	11 c0       	rjmp	.+34     	; 0x136a <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			value = GET_BIT(PIND,pin_num);
    1348:	e0 e3       	ldi	r30, 0x30	; 48
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_readPin+0xe8>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_readPin+0xe4>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <GPIO_setupPortDirection>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <GPIO_setupPortDirection+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_setupPortDirection+0x8>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	90 f5       	brcc	.+100    	; 0x13f6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction */
		switch(port_num)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3c 83       	std	Y+4, r19	; 0x04
    139a:	2b 83       	std	Y+3, r18	; 0x03
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	d1 f0       	breq	.+52     	; 0x13da <GPIO_setupPortDirection+0x5e>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <GPIO_setupPortDirection+0x3e>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <GPIO_setupPortDirection+0x54>
    13b8:	1e c0       	rjmp	.+60     	; 0x13f6 <GPIO_setupPortDirection+0x7a>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <GPIO_setupPortDirection+0x68>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <GPIO_setupPortDirection+0x72>
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13d0:	ea e3       	ldi	r30, 0x3A	; 58
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13da:	e7 e3       	ldi	r30, 0x37	; 55
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 83       	st	Z, r24
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	80 83       	st	Z, r24
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13ee:	e1 e3       	ldi	r30, 0x31	; 49
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <GPIO_writePort>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <GPIO_writePort+0x6>
    140a:	00 d0       	rcall	.+0      	; 0x140c <GPIO_writePort+0x8>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	90 f5       	brcc	.+100    	; 0x147e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* assign the port with the value */
		switch(port_num)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3c 83       	std	Y+4, r19	; 0x04
    1422:	2b 83       	std	Y+3, r18	; 0x03
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	d1 f0       	breq	.+52     	; 0x1462 <GPIO_writePort+0x5e>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	2c f4       	brge	.+10     	; 0x1442 <GPIO_writePort+0x3e>
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	61 f0       	breq	.+24     	; 0x1458 <GPIO_writePort+0x54>
    1440:	1e c0       	rjmp	.+60     	; 0x147e <GPIO_writePort+0x7a>
    1442:	2b 81       	ldd	r18, Y+3	; 0x03
    1444:	3c 81       	ldd	r19, Y+4	; 0x04
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	81 f0       	breq	.+32     	; 0x146c <GPIO_writePort+0x68>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	81 f0       	breq	.+32     	; 0x1476 <GPIO_writePort+0x72>
    1456:	13 c0       	rjmp	.+38     	; 0x147e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1458:	eb e3       	ldi	r30, 0x3B	; 59
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	80 83       	st	Z, r24
    1460:	0e c0       	rjmp	.+28     	; 0x147e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1462:	e8 e3       	ldi	r30, 0x38	; 56
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	80 83       	st	Z, r24
    146a:	09 c0       	rjmp	.+18     	; 0x147e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	80 83       	st	Z, r24
    1474:	04 c0       	rjmp	.+8      	; 0x147e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1476:	e2 e3       	ldi	r30, 0x32	; 50
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	80 83       	st	Z, r24
			break;
		}
	}
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <GPIO_readPort>:
[out]	-NONE
[in/out] -NONE
[Returns]: the value of the port in a uint8 variable
------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <GPIO_readPort+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_readPort+0x8>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    149a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	90 f5       	brcc	.+100    	; 0x1506 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* get the value in the selected port */
		switch(port_num)
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3c 83       	std	Y+4, r19	; 0x04
    14aa:	2b 83       	std	Y+3, r18	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	d1 f0       	breq	.+52     	; 0x14ea <GPIO_readPort+0x5e>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <GPIO_readPort+0x3e>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <GPIO_readPort+0x54>
    14c8:	1e c0       	rjmp	.+60     	; 0x1506 <GPIO_readPort+0x7a>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <GPIO_readPort+0x68>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	81 f0       	breq	.+32     	; 0x14fe <GPIO_readPort+0x72>
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14e0:	e9 e3       	ldi	r30, 0x39	; 57
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14ea:	e6 e3       	ldi	r30, 0x36	; 54
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14f4:	e3 e3       	ldi	r30, 0x33	; 51
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14fe:	e0 e3       	ldi	r30, 0x30	; 48
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <LCD_init>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_init(void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	2e 97       	sbiw	r28, 0x0e	; 14
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	65 e0       	ldi	r22, 0x05	; 5
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	66 e0       	ldi	r22, 0x06	; 6
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);/*this driver is always in write mode*/
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	66 e0       	ldi	r22, 0x06	; 6
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	67 e0       	ldi	r22, 0x07	; 7
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 ea       	ldi	r26, 0xA0	; 160
    1558:	b1 e4       	ldi	r27, 0x41	; 65
    155a:	8b 87       	std	Y+11, r24	; 0x0b
    155c:	9c 87       	std	Y+12, r25	; 0x0c
    155e:	ad 87       	std	Y+13, r26	; 0x0d
    1560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	6b 85       	ldd	r22, Y+11	; 0x0b
    1564:	7c 85       	ldd	r23, Y+12	; 0x0c
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a ef       	ldi	r20, 0xFA	; 250
    1570:	54 e4       	ldi	r21, 0x44	; 68
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8f 83       	std	Y+7, r24	; 0x07
    157c:	98 87       	std	Y+8, r25	; 0x08
    157e:	a9 87       	std	Y+9, r26	; 0x09
    1580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <LCD_init+0x8e>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <LCD_init+0x10c>
	else if (__tmp > 65535)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15be:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <LCD_init+0xee>
    15e6:	88 ec       	ldi	r24, 0xC8	; 200
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_init+0xdc>
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <LCD_init+0xd0>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_init+0x118>
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	0e 94 be 09 	call	0x137c	; 0x137c <GPIO_setupPortDirection>
	/*Mode configurations*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    163e:	88 e3       	ldi	r24, 0x38	; 56
    1640:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1644:	8c e0       	ldi	r24, 0x0C	; 12
    1646:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
}
    1650:	2e 96       	adiw	r28, 0x0e	; 14
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <LCD_sendCommand>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_sendCommand(uint8 command)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	e9 97       	sbiw	r28, 0x39	; 57
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	65 e0       	ldi	r22, 0x05	; 5
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e8       	ldi	r26, 0x80	; 128
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	8d ab       	std	Y+53, r24	; 0x35
    168c:	9e ab       	std	Y+54, r25	; 0x36
    168e:	af ab       	std	Y+55, r26	; 0x37
    1690:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6d a9       	ldd	r22, Y+53	; 0x35
    1694:	7e a9       	ldd	r23, Y+54	; 0x36
    1696:	8f a9       	ldd	r24, Y+55	; 0x37
    1698:	98 ad       	ldd	r25, Y+56	; 0x38
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	89 ab       	std	Y+49, r24	; 0x31
    16ac:	9a ab       	std	Y+50, r25	; 0x32
    16ae:	ab ab       	std	Y+51, r26	; 0x33
    16b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b2:	69 a9       	ldd	r22, Y+49	; 0x31
    16b4:	7a a9       	ldd	r23, Y+50	; 0x32
    16b6:	8b a9       	ldd	r24, Y+51	; 0x33
    16b8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <LCD_sendCommand+0x72>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	98 ab       	std	Y+48, r25	; 0x30
    16d0:	8f a7       	std	Y+47, r24	; 0x2f
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    16d4:	69 a9       	ldd	r22, Y+49	; 0x31
    16d6:	7a a9       	ldd	r23, Y+50	; 0x32
    16d8:	8b a9       	ldd	r24, Y+51	; 0x33
    16da:	9c a9       	ldd	r25, Y+52	; 0x34
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6d a9       	ldd	r22, Y+53	; 0x35
    16ee:	7e a9       	ldd	r23, Y+54	; 0x36
    16f0:	8f a9       	ldd	r24, Y+55	; 0x37
    16f2:	98 ad       	ldd	r25, Y+56	; 0x38
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	98 ab       	std	Y+48, r25	; 0x30
    1712:	8f a7       	std	Y+47, r24	; 0x2f
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LCD_sendCommand+0xd2>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9e a7       	std	Y+46, r25	; 0x2e
    171c:	8d a7       	std	Y+45, r24	; 0x2d
    171e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1720:	9e a5       	ldd	r25, Y+46	; 0x2e
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_sendCommand+0xc0>
    1726:	9e a7       	std	Y+46, r25	; 0x2e
    1728:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8f a5       	ldd	r24, Y+47	; 0x2f
    172c:	98 a9       	ldd	r25, Y+48	; 0x30
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	98 ab       	std	Y+48, r25	; 0x30
    1732:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8f a5       	ldd	r24, Y+47	; 0x2f
    1736:	98 a9       	ldd	r25, Y+48	; 0x30
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <LCD_sendCommand+0xb4>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	69 a9       	ldd	r22, Y+49	; 0x31
    1740:	7a a9       	ldd	r23, Y+50	; 0x32
    1742:	8b a9       	ldd	r24, Y+51	; 0x33
    1744:	9c a9       	ldd	r25, Y+52	; 0x34
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	98 ab       	std	Y+48, r25	; 0x30
    1750:	8f a7       	std	Y+47, r24	; 0x2f
    1752:	8f a5       	ldd	r24, Y+47	; 0x2f
    1754:	98 a9       	ldd	r25, Y+48	; 0x30
    1756:	9c a7       	std	Y+44, r25	; 0x2c
    1758:	8b a7       	std	Y+43, r24	; 0x2b
    175a:	8b a5       	ldd	r24, Y+43	; 0x2b
    175c:	9c a5       	ldd	r25, Y+44	; 0x2c
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_sendCommand+0xfc>
    1762:	9c a7       	std	Y+44, r25	; 0x2c
    1764:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/*Tas = 50ns*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	67 e0       	ldi	r22, 0x07	; 7
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e8       	ldi	r26, 0x80	; 128
    1776:	bf e3       	ldi	r27, 0x3F	; 63
    1778:	8f a3       	std	Y+39, r24	; 0x27
    177a:	98 a7       	std	Y+40, r25	; 0x28
    177c:	a9 a7       	std	Y+41, r26	; 0x29
    177e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6f a1       	ldd	r22, Y+39	; 0x27
    1782:	78 a5       	ldd	r23, Y+40	; 0x28
    1784:	89 a5       	ldd	r24, Y+41	; 0x29
    1786:	9a a5       	ldd	r25, Y+42	; 0x2a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a ef       	ldi	r20, 0xFA	; 250
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8b a3       	std	Y+35, r24	; 0x23
    179a:	9c a3       	std	Y+36, r25	; 0x24
    179c:	ad a3       	std	Y+37, r26	; 0x25
    179e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a0:	6b a1       	ldd	r22, Y+35	; 0x23
    17a2:	7c a1       	ldd	r23, Y+36	; 0x24
    17a4:	8d a1       	ldd	r24, Y+37	; 0x25
    17a6:	9e a1       	ldd	r25, Y+38	; 0x26
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_sendCommand+0x160>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    17c2:	6b a1       	ldd	r22, Y+35	; 0x23
    17c4:	7c a1       	ldd	r23, Y+36	; 0x24
    17c6:	8d a1       	ldd	r24, Y+37	; 0x25
    17c8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6f a1       	ldd	r22, Y+39	; 0x27
    17dc:	78 a5       	ldd	r23, Y+40	; 0x28
    17de:	89 a5       	ldd	r24, Y+41	; 0x29
    17e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9a a3       	std	Y+34, r25	; 0x22
    1800:	89 a3       	std	Y+33, r24	; 0x21
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_sendCommand+0x1c0>
    1804:	88 ec       	ldi	r24, 0xC8	; 200
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	98 a3       	std	Y+32, r25	; 0x20
    180a:	8f 8f       	std	Y+31, r24	; 0x1f
    180c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    180e:	98 a1       	ldd	r25, Y+32	; 0x20
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_sendCommand+0x1ae>
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	89 a1       	ldd	r24, Y+33	; 0x21
    181a:	9a a1       	ldd	r25, Y+34	; 0x22
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9a a3       	std	Y+34, r25	; 0x22
    1820:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	89 a1       	ldd	r24, Y+33	; 0x21
    1824:	9a a1       	ldd	r25, Y+34	; 0x22
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_sendCommand+0x1a2>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6b a1       	ldd	r22, Y+35	; 0x23
    182e:	7c a1       	ldd	r23, Y+36	; 0x24
    1830:	8d a1       	ldd	r24, Y+37	; 0x25
    1832:	9e a1       	ldd	r25, Y+38	; 0x26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	9e 8f       	std	Y+30, r25	; 0x1e
    1846:	8d 8f       	std	Y+29, r24	; 0x1d
    1848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_sendCommand+0x1ea>
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	69 ad       	ldd	r22, Y+57	; 0x39
    1858:	0e 94 02 0a 	call	0x1404	; 0x1404 <GPIO_writePort>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e8       	ldi	r26, 0x80	; 128
    1862:	bf e3       	ldi	r27, 0x3F	; 63
    1864:	89 8f       	std	Y+25, r24	; 0x19
    1866:	9a 8f       	std	Y+26, r25	; 0x1a
    1868:	ab 8f       	std	Y+27, r26	; 0x1b
    186a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8d 8b       	std	Y+21, r24	; 0x15
    1886:	9e 8b       	std	Y+22, r25	; 0x16
    1888:	af 8b       	std	Y+23, r26	; 0x17
    188a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    188c:	6d 89       	ldd	r22, Y+21	; 0x15
    188e:	7e 89       	ldd	r23, Y+22	; 0x16
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	2c f4       	brge	.+10     	; 0x18ae <LCD_sendCommand+0x24c>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 8b       	std	Y+20, r25	; 0x14
    18aa:	8b 8b       	std	Y+19, r24	; 0x13
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	3f ef       	ldi	r19, 0xFF	; 255
    18ba:	4f e7       	ldi	r20, 0x7F	; 127
    18bc:	57 e4       	ldi	r21, 0x47	; 71
    18be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c2:	18 16       	cp	r1, r24
    18c4:	4c f5       	brge	.+82     	; 0x1918 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c6:	69 8d       	ldd	r22, Y+25	; 0x19
    18c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e2       	ldi	r20, 0x20	; 32
    18d4:	51 e4       	ldi	r21, 0x41	; 65
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <LCD_sendCommand+0x2ac>
    18f0:	88 ec       	ldi	r24, 0xC8	; 200
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a 8b       	std	Y+18, r25	; 0x12
    18f6:	89 8b       	std	Y+17, r24	; 0x11
    18f8:	89 89       	ldd	r24, Y+17	; 0x11
    18fa:	9a 89       	ldd	r25, Y+18	; 0x12
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_sendCommand+0x29a>
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	69 f7       	brne	.-38     	; 0x18f0 <LCD_sendCommand+0x28e>
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	98 8b       	std	Y+16, r25	; 0x10
    1932:	8f 87       	std	Y+15, r24	; 0x0f
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	98 89       	ldd	r25, Y+16	; 0x10
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_sendCommand+0x2d6>
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);/*Tdsw = 100ns*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	67 e0       	ldi	r22, 0x07	; 7
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e8       	ldi	r26, 0x80	; 128
    1950:	bf e3       	ldi	r27, 0x3F	; 63
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_sendCommand+0x39a>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_sendCommand+0x388>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <LCD_sendCommand+0x37c>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_sendCommand+0x3c4>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);/*Th = 13ns*/
}
    1a2e:	e9 96       	adiw	r28, 0x39	; 57
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <LCD_displayCharacter>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_displayCharacter(char data)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	e9 97       	sbiw	r28, 0x39	; 57
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	65 e0       	ldi	r22, 0x05	; 5
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e8       	ldi	r26, 0x80	; 128
    1a66:	bf e3       	ldi	r27, 0x3F	; 63
    1a68:	8d ab       	std	Y+53, r24	; 0x35
    1a6a:	9e ab       	std	Y+54, r25	; 0x36
    1a6c:	af ab       	std	Y+55, r26	; 0x37
    1a6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	6d a9       	ldd	r22, Y+53	; 0x35
    1a72:	7e a9       	ldd	r23, Y+54	; 0x36
    1a74:	8f a9       	ldd	r24, Y+55	; 0x37
    1a76:	98 ad       	ldd	r25, Y+56	; 0x38
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a ef       	ldi	r20, 0xFA	; 250
    1a7e:	54 e4       	ldi	r21, 0x44	; 68
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	89 ab       	std	Y+49, r24	; 0x31
    1a8a:	9a ab       	std	Y+50, r25	; 0x32
    1a8c:	ab ab       	std	Y+51, r26	; 0x33
    1a8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a90:	69 a9       	ldd	r22, Y+49	; 0x31
    1a92:	7a a9       	ldd	r23, Y+50	; 0x32
    1a94:	8b a9       	ldd	r24, Y+51	; 0x33
    1a96:	9c a9       	ldd	r25, Y+52	; 0x34
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	98 ab       	std	Y+48, r25	; 0x30
    1aae:	8f a7       	std	Y+47, r24	; 0x2f
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	6d a9       	ldd	r22, Y+53	; 0x35
    1acc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ace:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_displayCharacter+0xd2>
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9e a7       	std	Y+46, r25	; 0x2e
    1afa:	8d a7       	std	Y+45, r24	; 0x2d
    1afc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1afe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_displayCharacter+0xc0>
    1b04:	9e a7       	std	Y+46, r25	; 0x2e
    1b06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <LCD_displayCharacter+0xb4>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b20:	8b a9       	ldd	r24, Y+51	; 0x33
    1b22:	9c a9       	ldd	r25, Y+52	; 0x34
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	98 ab       	std	Y+48, r25	; 0x30
    1b2e:	8f a7       	std	Y+47, r24	; 0x2f
    1b30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b32:	98 a9       	ldd	r25, Y+48	; 0x30
    1b34:	9c a7       	std	Y+44, r25	; 0x2c
    1b36:	8b a7       	std	Y+43, r24	; 0x2b
    1b38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_displayCharacter+0xfc>
    1b40:	9c a7       	std	Y+44, r25	; 0x2c
    1b42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/*Tas = 50ns*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	67 e0       	ldi	r22, 0x07	; 7
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e8       	ldi	r26, 0x80	; 128
    1b54:	bf e3       	ldi	r27, 0x3F	; 63
    1b56:	8f a3       	std	Y+39, r24	; 0x27
    1b58:	98 a7       	std	Y+40, r25	; 0x28
    1b5a:	a9 a7       	std	Y+41, r26	; 0x29
    1b5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b60:	78 a5       	ldd	r23, Y+40	; 0x28
    1b62:	89 a5       	ldd	r24, Y+41	; 0x29
    1b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a ef       	ldi	r20, 0xFA	; 250
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8b a3       	std	Y+35, r24	; 0x23
    1b78:	9c a3       	std	Y+36, r25	; 0x24
    1b7a:	ad a3       	std	Y+37, r26	; 0x25
    1b7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bba:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_displayCharacter+0x1c0>
    1be2:	88 ec       	ldi	r24, 0xC8	; 200
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	98 a3       	std	Y+32, r25	; 0x20
    1be8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bec:	98 a1       	ldd	r25, Y+32	; 0x20
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_displayCharacter+0x1ae>
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9a a3       	std	Y+34, r25	; 0x22
    1bfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_displayCharacter+0x1a2>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9a a3       	std	Y+34, r25	; 0x22
    1c1c:	89 a3       	std	Y+33, r24	; 0x21
    1c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c20:	9a a1       	ldd	r25, Y+34	; 0x22
    1c22:	9e 8f       	std	Y+30, r25	; 0x1e
    1c24:	8d 8f       	std	Y+29, r24	; 0x1d
    1c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x1ea>
    1c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c30:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	69 ad       	ldd	r22, Y+57	; 0x39
    1c36:	0e 94 02 0a 	call	0x1404	; 0x1404 <GPIO_writePort>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	89 8f       	std	Y+25, r24	; 0x19
    1c44:	9a 8f       	std	Y+26, r25	; 0x1a
    1c46:	ab 8f       	std	Y+27, r26	; 0x1b
    1c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8d 8b       	std	Y+21, r24	; 0x15
    1c64:	9e 8b       	std	Y+22, r25	; 0x16
    1c66:	af 8b       	std	Y+23, r26	; 0x17
    1c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_displayCharacter+0x2ac>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_displayCharacter+0x29a>
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_displayCharacter+0x28e>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0e:	98 8b       	std	Y+16, r25	; 0x10
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	98 89       	ldd	r25, Y+16	; 0x10
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_displayCharacter+0x2d6>
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);/*Tdsw = 100ns*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	67 e0       	ldi	r22, 0x07	; 7
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	8b 87       	std	Y+11, r24	; 0x0b
    1d32:	9c 87       	std	Y+12, r25	; 0x0c
    1d34:	ad 87       	std	Y+13, r26	; 0x0d
    1d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a ef       	ldi	r20, 0xFA	; 250
    1d46:	54 e4       	ldi	r21, 0x44	; 68
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	8f 83       	std	Y+7, r24	; 0x07
    1d52:	98 87       	std	Y+8, r25	; 0x08
    1d54:	a9 87       	std	Y+9, r26	; 0x09
    1d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	3f c0       	rjmp	.+126    	; 0x1df8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	4c f5       	brge	.+82     	; 0x1de4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_displayCharacter+0x39a>
    1dbc:	88 ec       	ldi	r24, 0xC8	; 200
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_displayCharacter+0x388>
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	69 f7       	brne	.-38     	; 0x1dbc <LCD_displayCharacter+0x37c>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_displayCharacter+0x3c4>
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);/*Th = 13ns*/
}
    1e0c:	e9 96       	adiw	r28, 0x39	; 57
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LCD_displayString>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_displayString(const char *str)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <LCD_displayString+0x6>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <LCD_displayString+0x24>
	while(*str != '\0')
	{
		LCD_displayCharacter(*str);
    1e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e30:	fa 81       	ldd	r31, Y+2	; 0x02
    1e32:	80 81       	ld	r24, Z
    1e34:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
		str++;
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_displayString(const char *str)
{
	while(*str != '\0')
    1e42:	e9 81       	ldd	r30, Y+1	; 0x01
    1e44:	fa 81       	ldd	r31, Y+2	; 0x02
    1e46:	80 81       	ld	r24, Z
    1e48:	88 23       	and	r24, r24
    1e4a:	89 f7       	brne	.-30     	; 0x1e2e <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*str);
		str++;
	}
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <LCD_moveCursor>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_moveCursor(uint8 row,uint8 column)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <LCD_moveCursor+0x6>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <LCD_moveCursor+0x8>
    1e5e:	0f 92       	push	r0
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	8a 83       	std	Y+2, r24	; 0x02
    1e66:	6b 83       	std	Y+3, r22	; 0x03
	uint8 cursorAddress;
	switch(row)
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3d 83       	std	Y+5, r19	; 0x05
    1e70:	2c 83       	std	Y+4, r18	; 0x04
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	91 05       	cpc	r25, r1
    1e7a:	c1 f0       	breq	.+48     	; 0x1eac <LCD_moveCursor+0x56>
    1e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <LCD_moveCursor+0x3a>
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <LCD_moveCursor+0x50>
    1e8e:	19 c0       	rjmp	.+50     	; 0x1ec2 <LCD_moveCursor+0x6c>
    1e90:	2c 81       	ldd	r18, Y+4	; 0x04
    1e92:	3d 81       	ldd	r19, Y+5	; 0x05
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	69 f0       	breq	.+26     	; 0x1eb4 <LCD_moveCursor+0x5e>
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <LCD_moveCursor+0x66>
    1ea4:	0e c0       	rjmp	.+28     	; 0x1ec2 <LCD_moveCursor+0x6c>
	{
	case 0:
		cursorAddress = column+0x00;
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	0b c0       	rjmp	.+22     	; 0x1ec2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		cursorAddress = column+0x40;
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	80 5c       	subi	r24, 0xC0	; 192
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	07 c0       	rjmp	.+14     	; 0x1ec2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		cursorAddress = column+0x10;
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	80 5f       	subi	r24, 0xF0	; 240
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		cursorAddress = column+0x50;
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	80 5b       	subi	r24, 0xB0	; 176
    1ec0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | cursorAddress);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	80 68       	ori	r24, 0x80	; 128
    1ec6:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <LCD_displayStringRowColumn>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_displayStringRowColumn(uint8 row,uint8 column,const char *str)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <LCD_displayStringRowColumn+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <LCD_displayStringRowColumn+0x8>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	6a 83       	std	Y+2, r22	; 0x02
    1eea:	5c 83       	std	Y+4, r21	; 0x04
    1eec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column);
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
	LCD_displayString(str);
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_intgerToString>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_intgerToString(int data)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	62 97       	sbiw	r28, 0x12	; 18
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	9a 8b       	std	Y+18, r25	; 0x12
    1f22:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    1f24:	89 89       	ldd	r24, Y+17	; 0x11
    1f26:	9a 89       	ldd	r25, Y+18	; 0x12
    1f28:	9e 01       	movw	r18, r28
    1f2a:	2f 5f       	subi	r18, 0xFF	; 255
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	b9 01       	movw	r22, r18
    1f30:	4a e0       	ldi	r20, 0x0A	; 10
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <itoa>
	LCD_displayString(buffer);
    1f38:	ce 01       	movw	r24, r28
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
}
    1f40:	62 96       	adiw	r28, 0x12	; 18
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <LCD_clearScreen>:
[in/out] -NONE
[Returns]: Nothing

------------------------------------------------------------------*/
void LCD_clearScreen(void)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
}
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <KEYPAD_getPressedKey+0x6>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+0, PIN_INPUT);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	61 e0       	ldi	r22, 0x01	; 1
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+0, PIN_INPUT);
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	65 e0       	ldi	r22, 0x05	; 5
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	66 e0       	ldi	r22, 0x06	; 6
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>

#if KEYPAD_NUM_COLS == 4
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	67 e0       	ldi	r22, 0x07	; 7
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1fc0:	1a 82       	std	Y+2, r1	; 0x02
    1fc2:	35 c0       	rjmp	.+106    	; 0x202e <KEYPAD_getPressedKey+0xc8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	6a 81       	ldd	r22, Y+2	; 0x02
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
			GPIO_writePin(PORTB_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <GPIO_writePin>
			for(col=0;col<KEYPAD_NUM_COLS;col++)
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	1e c0       	rjmp	.+60     	; 0x2018 <KEYPAD_getPressedKey+0xb2>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	98 2f       	mov	r25, r24
    1fe0:	9c 5f       	subi	r25, 0xFC	; 252
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	69 2f       	mov	r22, r25
    1fe6:	0e 94 3c 09 	call	0x1278	; 0x1278 <GPIO_readPin>
    1fea:	88 23       	and	r24, r24
    1fec:	91 f4       	brne	.+36     	; 0x2012 <KEYPAD_getPressedKey+0xac>
						#ifndef STANDARD_KEYPAD
							#if KEYPAD_NUM_COLS == 3
								return KEYPAD_4x3_adjustKeyNumber(row*KEYPAD_NUM_COLS + col +1);
							#elif KEYPAD_NUM_COLS == 4
								return KEYPAD_4x4_adjustKeyNumber(row*KEYPAD_NUM_COLS + col +1);
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	89 0f       	add	r24, r25
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	0e 94 1b 10 	call	0x2036	; 0x2036 <KEYPAD_4x4_adjustKeyNumber>
						#endif
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
		}
	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(PORTB_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
			for(col=0;col<KEYPAD_NUM_COLS;col++)
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	f8 f2       	brcs	.-66     	; 0x1fdc <KEYPAD_getPressedKey+0x76>

						#else
								return (row*KEYPAD_NUM_COLS + col +1);
						#endif
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	6a 81       	ldd	r22, Y+2	; 0x02
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	0e 94 66 07 	call	0xecc	; 0xecc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	84 30       	cpi	r24, 0x04	; 4
    2032:	40 f2       	brcs	.-112    	; 0x1fc4 <KEYPAD_getPressedKey+0x5e>
    2034:	c5 cf       	rjmp	.-118    	; 0x1fc0 <KEYPAD_getPressedKey+0x5a>

00002036 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif KEYPAD_NUM_COLS == 4

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <KEYPAD_4x4_adjustKeyNumber+0x6>
    203c:	00 d0       	rcall	.+0      	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x8>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2044:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3c 83       	std	Y+4, r19	; 0x04
    204e:	2b 83       	std	Y+3, r18	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	88 30       	cpi	r24, 0x08	; 8
    2056:	91 05       	cpc	r25, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <KEYPAD_4x4_adjustKeyNumber+0x26>
    205a:	70 c0       	rjmp	.+224    	; 0x213c <KEYPAD_4x4_adjustKeyNumber+0x106>
    205c:	2b 81       	ldd	r18, Y+3	; 0x03
    205e:	3c 81       	ldd	r19, Y+4	; 0x04
    2060:	29 30       	cpi	r18, 0x09	; 9
    2062:	31 05       	cpc	r19, r1
    2064:	5c f5       	brge	.+86     	; 0x20bc <KEYPAD_4x4_adjustKeyNumber+0x86>
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	84 30       	cpi	r24, 0x04	; 4
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2070:	59 c0       	rjmp	.+178    	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2072:	2b 81       	ldd	r18, Y+3	; 0x03
    2074:	3c 81       	ldd	r19, Y+4	; 0x04
    2076:	25 30       	cpi	r18, 0x05	; 5
    2078:	31 05       	cpc	r19, r1
    207a:	9c f4       	brge	.+38     	; 0x20a2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	82 30       	cpi	r24, 0x02	; 2
    2082:	91 05       	cpc	r25, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2086:	48 c0       	rjmp	.+144    	; 0x2118 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2088:	2b 81       	ldd	r18, Y+3	; 0x03
    208a:	3c 81       	ldd	r19, Y+4	; 0x04
    208c:	23 30       	cpi	r18, 0x03	; 3
    208e:	31 05       	cpc	r19, r1
    2090:	0c f0       	brlt	.+2      	; 0x2094 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2092:	45 c0       	rjmp	.+138    	; 0x211e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	91 05       	cpc	r25, r1
    209c:	09 f4       	brne	.+2      	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    209e:	39 c0       	rjmp	.+114    	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20a0:	67 c0       	rjmp	.+206    	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	26 30       	cpi	r18, 0x06	; 6
    20a8:	31 05       	cpc	r19, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0x78>
    20ac:	41 c0       	rjmp	.+130    	; 0x2130 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	87 30       	cpi	r24, 0x07	; 7
    20b4:	91 05       	cpc	r25, r1
    20b6:	0c f0       	brlt	.+2      	; 0x20ba <KEYPAD_4x4_adjustKeyNumber+0x84>
    20b8:	3e c0       	rjmp	.+124    	; 0x2136 <KEYPAD_4x4_adjustKeyNumber+0x100>
    20ba:	37 c0       	rjmp	.+110    	; 0x212a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20bc:	2b 81       	ldd	r18, Y+3	; 0x03
    20be:	3c 81       	ldd	r19, Y+4	; 0x04
    20c0:	2c 30       	cpi	r18, 0x0C	; 12
    20c2:	31 05       	cpc	r19, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    20c6:	46 c0       	rjmp	.+140    	; 0x2154 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	8d 30       	cpi	r24, 0x0D	; 13
    20ce:	91 05       	cpc	r25, r1
    20d0:	5c f4       	brge	.+22     	; 0x20e8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	2a 30       	cpi	r18, 0x0A	; 10
    20d8:	31 05       	cpc	r19, r1
    20da:	b1 f1       	breq	.+108    	; 0x2148 <KEYPAD_4x4_adjustKeyNumber+0x112>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	8b 30       	cpi	r24, 0x0B	; 11
    20e2:	91 05       	cpc	r25, r1
    20e4:	a4 f5       	brge	.+104    	; 0x214e <KEYPAD_4x4_adjustKeyNumber+0x118>
    20e6:	2d c0       	rjmp	.+90     	; 0x2142 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	2e 30       	cpi	r18, 0x0E	; 14
    20ee:	31 05       	cpc	r19, r1
    20f0:	b9 f1       	breq	.+110    	; 0x2160 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	8e 30       	cpi	r24, 0x0E	; 14
    20f8:	91 05       	cpc	r25, r1
    20fa:	7c f1       	brlt	.+94     	; 0x215a <KEYPAD_4x4_adjustKeyNumber+0x124>
    20fc:	2b 81       	ldd	r18, Y+3	; 0x03
    20fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2100:	2f 30       	cpi	r18, 0x0F	; 15
    2102:	31 05       	cpc	r19, r1
    2104:	79 f1       	breq	.+94     	; 0x2164 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	80 31       	cpi	r24, 0x10	; 16
    210c:	91 05       	cpc	r25, r1
    210e:	69 f1       	breq	.+90     	; 0x216a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2110:	2f c0       	rjmp	.+94     	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    2112:	87 e0       	ldi	r24, 0x07	; 7
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	2e c0       	rjmp	.+92     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    2118:	88 e0       	ldi	r24, 0x08	; 8
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	2b c0       	rjmp	.+86     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    211e:	89 e0       	ldi	r24, 0x09	; 9
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	28 c0       	rjmp	.+80     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    2124:	85 e2       	ldi	r24, 0x25	; 37
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	25 c0       	rjmp	.+74     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	22 c0       	rjmp	.+68     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    2130:	85 e0       	ldi	r24, 0x05	; 5
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	1f c0       	rjmp	.+62     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    2136:	86 e0       	ldi	r24, 0x06	; 6
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	1c c0       	rjmp	.+56     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    213c:	8a e2       	ldi	r24, 0x2A	; 42
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	19 c0       	rjmp	.+50     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	16 c0       	rjmp	.+44     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	13 c0       	rjmp	.+38     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	10 c0       	rjmp	.+32     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2154:	8d e2       	ldi	r24, 0x2D	; 45
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    215a:	8d e0       	ldi	r24, 0x0D	; 13
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	0a c0       	rjmp	.+20     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2160:	19 82       	std	Y+1, r1	; 0x01
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2164:	8d e3       	ldi	r24, 0x3D	; 61
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    216a:	8b e2       	ldi	r24, 0x2B	; 43
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <app>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void app(void)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	e4 97       	sbiw	r28, 0x34	; 52
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61

	/* array to store second password entered */
	uint8 pass2arr[PASSWORD_SIZE];

	/* flag to set and reset the password */
	uint8 passSetFlag = 0;
    2198:	1d 8e       	std	Y+29, r1	; 0x1d

	/* UART configurations structure */
	UART_ConfigType uartConfig = {DISABLE_PARITY,ONE_STOPBIT,EIGHT_DATABITS,9600};
    219a:	ce 01       	movw	r24, r28
    219c:	89 96       	adiw	r24, 0x29	; 41
    219e:	99 ab       	std	Y+49, r25	; 0x31
    21a0:	88 ab       	std	Y+48, r24	; 0x30
    21a2:	e3 e1       	ldi	r30, 0x13	; 19
    21a4:	f1 e0       	ldi	r31, 0x01	; 1
    21a6:	fb ab       	std	Y+51, r31	; 0x33
    21a8:	ea ab       	std	Y+50, r30	; 0x32
    21aa:	f7 e0       	ldi	r31, 0x07	; 7
    21ac:	fc ab       	std	Y+52, r31	; 0x34
    21ae:	ea a9       	ldd	r30, Y+50	; 0x32
    21b0:	fb a9       	ldd	r31, Y+51	; 0x33
    21b2:	00 80       	ld	r0, Z
    21b4:	8a a9       	ldd	r24, Y+50	; 0x32
    21b6:	9b a9       	ldd	r25, Y+51	; 0x33
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	9b ab       	std	Y+51, r25	; 0x33
    21bc:	8a ab       	std	Y+50, r24	; 0x32
    21be:	e8 a9       	ldd	r30, Y+48	; 0x30
    21c0:	f9 a9       	ldd	r31, Y+49	; 0x31
    21c2:	00 82       	st	Z, r0
    21c4:	88 a9       	ldd	r24, Y+48	; 0x30
    21c6:	99 a9       	ldd	r25, Y+49	; 0x31
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	99 ab       	std	Y+49, r25	; 0x31
    21cc:	88 ab       	std	Y+48, r24	; 0x30
    21ce:	9c a9       	ldd	r25, Y+52	; 0x34
    21d0:	91 50       	subi	r25, 0x01	; 1
    21d2:	9c ab       	std	Y+52, r25	; 0x34
    21d4:	ec a9       	ldd	r30, Y+52	; 0x34
    21d6:	ee 23       	and	r30, r30
    21d8:	51 f7       	brne	.-44     	; 0x21ae <app+0x2a>

	/* set I-Bit to enable interrupts */
	SREG = (1<<7);
    21da:	ef e5       	ldi	r30, 0x5F	; 95
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 e8       	ldi	r24, 0x80	; 128
    21e0:	80 83       	st	Z, r24

	/* initialize LCD Screen */
	LCD_init();
    21e2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_init>

	/* initialize UART */
	UART_init(&uartConfig);
    21e6:	ce 01       	movw	r24, r28
    21e8:	89 96       	adiw	r24, 0x29	; 41
    21ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/* send READY BYTE to the Control ECU */
	UART_sendByte(HMI_READY);
    21ee:	8f ef       	ldi	r24, 0xFF	; 255
    21f0:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

	while(1)
	{
		/* check if the password is set or not */
		if(passSetFlag == 0)
    21f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f6:	88 23       	and	r24, r24
    21f8:	f1 f4       	brne	.+60     	; 0x2236 <app+0xb2>
			/* Checks if the User has logged in before
			 * and the system has restarted for any reason
			 */

			/* asks the Control ECU if password already exists */
			UART_sendByte(CHECK_IF_PASS_EXIST);
    21fa:	87 ef       	ldi	r24, 0xF7	; 247
    21fc:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

			/* if it exist set password is set flag to one and go to the first of the main loop */
			if(UART_receiveByte() == PASS_EXIST)
    2200:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_receiveByte>
    2204:	8c 3c       	cpi	r24, 0xCC	; 204
    2206:	19 f4       	brne	.+6      	; 0x220e <app+0x8a>
			{

				passSetFlag = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8d 8f       	std	Y+29, r24	; 0x1d
    220c:	f3 cf       	rjmp	.-26     	; 0x21f4 <app+0x70>
			}

			/* password is not found it means we should setup a new password */
			do
			{
				getPassword(pass1arr);
    220e:	ce 01       	movw	r24, r28
    2210:	4f 96       	adiw	r24, 0x1f	; 31
    2212:	0e 94 87 12 	call	0x250e	; 0x250e <getPassword>
				getPasswordConfirmation(pass2arr);
    2216:	ce 01       	movw	r24, r28
    2218:	84 96       	adiw	r24, 0x24	; 36
    221a:	0e 94 45 13 	call	0x268a	; 0x268a <getPasswordConfirmation>
				/* Password is set successfully */
				passSetFlag = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	8d 8f       	std	Y+29, r24	; 0x1d

				/* repeat till two passwords match */
			}while(checkPasswordsMatching(pass1arr, pass2arr) == TWO_PASSWORDS_NOT_MATCHED);
    2222:	ce 01       	movw	r24, r28
    2224:	4f 96       	adiw	r24, 0x1f	; 31
    2226:	9e 01       	movw	r18, r28
    2228:	2c 5d       	subi	r18, 0xDC	; 220
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	b9 01       	movw	r22, r18
    222e:	0e 94 0a 14 	call	0x2814	; 0x2814 <checkPasswordsMatching>
    2232:	88 23       	and	r24, r24
    2234:	61 f3       	breq	.-40     	; 0x220e <app+0x8a>

			/* you got out of the loop means Password is saved successfully */
		}

		/* display Main Menu */
		LCD_clearScreen();
    2236:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    223a:	20 e6       	ldi	r18, 0x60	; 96
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	a9 01       	movw	r20, r18
    2244:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    2248:	2e e6       	ldi	r18, 0x6E	; 110
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	a9 01       	movw	r20, r18
    2252:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>

		/* loop to get only one of the two options '+' or '-' to open the door or change the password */
		do
		{
			keyPressed = KEYPAD_getPressedKey();
    2256:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <KEYPAD_getPressedKey>
    225a:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(keyPressed != '+' && keyPressed != '-');
    225c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    225e:	8b 32       	cpi	r24, 0x2B	; 43
    2260:	19 f0       	breq	.+6      	; 0x2268 <app+0xe4>
    2262:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2264:	8d 32       	cpi	r24, 0x2D	; 45
    2266:	b9 f7       	brne	.-18     	; 0x2256 <app+0xd2>

		/* open Door Option */
		if(keyPressed == '+')
    2268:	8e 8d       	ldd	r24, Y+30	; 0x1e
    226a:	8b 32       	cpi	r24, 0x2B	; 43
    226c:	09 f0       	breq	.+2      	; 0x2270 <app+0xec>
    226e:	98 c0       	rjmp	.+304    	; 0x23a0 <app+0x21c>
		{
			/* loop to repeat till the password is right or you lose all three tries */
			while(1)
			{
				getPassword(pass1arr);
    2270:	ce 01       	movw	r24, r28
    2272:	4f 96       	adiw	r24, 0x1f	; 31
    2274:	0e 94 87 12 	call	0x250e	; 0x250e <getPassword>

				/* checks if the password is right */
				if(checkPassword(pass1arr) == RIGHT_PASSWORD)
    2278:	ce 01       	movw	r24, r28
    227a:	4f 96       	adiw	r24, 0x1f	; 31
    227c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <checkPassword>
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	19 f4       	brne	.+6      	; 0x228a <app+0x106>
				{
					/* if password is right open the door and get out of the loop */
					openDoor();
    2284:	0e 94 7e 14 	call	0x28fc	; 0x28fc <openDoor>
    2288:	88 c0       	rjmp	.+272    	; 0x239a <app+0x216>
				}

				/* password is wrong -- your chances has reduced by one */
				else
				{
					passWrongCounter++;
    228a:	80 91 23 01 	lds	r24, 0x0123
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	80 93 23 01 	sts	0x0123, r24

					LCD_clearScreen();
    2294:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
					LCD_moveCursor(0, 0);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
					LCD_displayString("Wrong Password!!");
    22a0:	8e e7       	ldi	r24, 0x7E	; 126
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	aa ef       	ldi	r26, 0xFA	; 250
    22ae:	b3 e4       	ldi	r27, 0x43	; 67
    22b0:	89 8f       	std	Y+25, r24	; 0x19
    22b2:	9a 8f       	std	Y+26, r25	; 0x1a
    22b4:	ab 8f       	std	Y+27, r26	; 0x1b
    22b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a ef       	ldi	r20, 0xFA	; 250
    22c6:	54 e4       	ldi	r21, 0x44	; 68
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8d 8b       	std	Y+21, r24	; 0x15
    22d2:	9e 8b       	std	Y+22, r25	; 0x16
    22d4:	af 8b       	std	Y+23, r26	; 0x17
    22d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d8:	6d 89       	ldd	r22, Y+21	; 0x15
    22da:	7e 89       	ldd	r23, Y+22	; 0x16
    22dc:	8f 89       	ldd	r24, Y+23	; 0x17
    22de:	98 8d       	ldd	r25, Y+24	; 0x18
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	2c f4       	brge	.+10     	; 0x22fa <app+0x176>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
    22f6:	8b 8b       	std	Y+19, r24	; 0x13
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <app+0x1f4>
	else if (__tmp > 65535)
    22fa:	6d 89       	ldd	r22, Y+21	; 0x15
    22fc:	7e 89       	ldd	r23, Y+22	; 0x16
    22fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2300:	98 8d       	ldd	r25, Y+24	; 0x18
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	4c f5       	brge	.+82     	; 0x2364 <app+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	69 8d       	ldd	r22, Y+25	; 0x19
    2314:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	51 e4       	ldi	r21, 0x41	; 65
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9c 8b       	std	Y+20, r25	; 0x14
    2338:	8b 8b       	std	Y+19, r24	; 0x13
    233a:	0f c0       	rjmp	.+30     	; 0x235a <app+0x1d6>
    233c:	88 ec       	ldi	r24, 0xC8	; 200
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9a 8b       	std	Y+18, r25	; 0x12
    2342:	89 8b       	std	Y+17, r24	; 0x11
    2344:	89 89       	ldd	r24, Y+17	; 0x11
    2346:	9a 89       	ldd	r25, Y+18	; 0x12
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <app+0x1c4>
    234c:	9a 8b       	std	Y+18, r25	; 0x12
    234e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9c 8b       	std	Y+20, r25	; 0x14
    2358:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235a:	8b 89       	ldd	r24, Y+19	; 0x13
    235c:	9c 89       	ldd	r25, Y+20	; 0x14
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	69 f7       	brne	.-38     	; 0x233c <app+0x1b8>
    2362:	14 c0       	rjmp	.+40     	; 0x238c <app+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2364:	6d 89       	ldd	r22, Y+21	; 0x15
    2366:	7e 89       	ldd	r23, Y+22	; 0x16
    2368:	8f 89       	ldd	r24, Y+23	; 0x17
    236a:	98 8d       	ldd	r25, Y+24	; 0x18
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9c 8b       	std	Y+20, r25	; 0x14
    2376:	8b 8b       	std	Y+19, r24	; 0x13
    2378:	8b 89       	ldd	r24, Y+19	; 0x13
    237a:	9c 89       	ldd	r25, Y+20	; 0x14
    237c:	98 8b       	std	Y+16, r25	; 0x10
    237e:	8f 87       	std	Y+15, r24	; 0x0f
    2380:	8f 85       	ldd	r24, Y+15	; 0x0f
    2382:	98 89       	ldd	r25, Y+16	; 0x10
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <app+0x200>
    2388:	98 8b       	std	Y+16, r25	; 0x10
    238a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
				}
				/* checks if you entered the password wrong for three times */
				if(passWrongCounter == MAX_NUM_OF_WRONG_TRIES)
    238c:	80 91 23 01 	lds	r24, 0x0123
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	09 f0       	breq	.+2      	; 0x2396 <app+0x212>
    2394:	6d cf       	rjmp	.-294    	; 0x2270 <app+0xec>
				{
					/* activate the alarm */
					activateAlarm();
    2396:	0e 94 b3 14 	call	0x2966	; 0x2966 <activateAlarm>
					break;
				}
			}
			/* reset your wrong pass tries */
			passWrongCounter = 0;
    239a:	10 92 23 01 	sts	0x0123, r1
    239e:	2a cf       	rjmp	.-428    	; 0x21f4 <app+0x70>
		else
		{
			/* loop to repeat till the password is right or you lose all three tries */
			while(1)
			{
				getPassword(pass1arr);
    23a0:	ce 01       	movw	r24, r28
    23a2:	4f 96       	adiw	r24, 0x1f	; 31
    23a4:	0e 94 87 12 	call	0x250e	; 0x250e <getPassword>
				/* checks if the password is right */
				if(checkPassword(pass1arr) == RIGHT_PASSWORD)
    23a8:	ce 01       	movw	r24, r28
    23aa:	4f 96       	adiw	r24, 0x1f	; 31
    23ac:	0e 94 50 14 	call	0x28a0	; 0x28a0 <checkPassword>
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	b1 f4       	brne	.+44     	; 0x23e0 <app+0x25c>
				{
					LCD_clearScreen();
    23b4:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
					LCD_moveCursor(0, 0);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
					LCD_displayString("Change the pass");
    23c0:	8f e8       	ldi	r24, 0x8F	; 143
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
					delaySeconds(1);
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	0e 94 cb 14 	call	0x2996	; 0x2996 <delaySeconds>

					/* Clear password flag and continues to get to the loop */
					passSetFlag = 0;
    23ce:	1d 8e       	std	Y+29, r1	; 0x1d

					/* deletes the password in the EEPROM */
					UART_sendByte(RESET_PASS);
    23d0:	88 ef       	ldi	r24, 0xF8	; 248
    23d2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
					while(UART_receiveByte() != RESET_COMPLETE );
    23d6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_receiveByte>
    23da:	89 3f       	cpi	r24, 0xF9	; 249
    23dc:	e1 f7       	brne	.-8      	; 0x23d6 <app+0x252>
    23de:	88 c0       	rjmp	.+272    	; 0x24f0 <app+0x36c>
				}

				/* password is wrong -- your chances has reduced by one */
				else
				{
					passWrongCounter++;
    23e0:	80 91 23 01 	lds	r24, 0x0123
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	80 93 23 01 	sts	0x0123, r24
					LCD_clearScreen();
    23ea:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
					LCD_moveCursor(0, 0);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
					LCD_displayString("Wrong Password!!");
    23f6:	8e e7       	ldi	r24, 0x7E	; 126
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	aa ef       	ldi	r26, 0xFA	; 250
    2404:	b3 e4       	ldi	r27, 0x43	; 67
    2406:	8b 87       	std	Y+11, r24	; 0x0b
    2408:	9c 87       	std	Y+12, r25	; 0x0c
    240a:	ad 87       	std	Y+13, r26	; 0x0d
    240c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a ef       	ldi	r20, 0xFA	; 250
    241c:	54 e4       	ldi	r21, 0x44	; 68
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	98 87       	std	Y+8, r25	; 0x08
    242a:	a9 87       	std	Y+9, r26	; 0x09
    242c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <app+0x2cc>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <app+0x34a>
	else if (__tmp > 65535)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <app+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <app+0x32c>
    2492:	88 ec       	ldi	r24, 0xC8	; 200
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <app+0x31a>
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <app+0x30e>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <app+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <app+0x356>
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
				/* checks if you entered the password wrong for three times */
				if(passWrongCounter == MAX_NUM_OF_WRONG_TRIES)
    24e2:	80 91 23 01 	lds	r24, 0x0123
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	09 f0       	breq	.+2      	; 0x24ec <app+0x368>
    24ea:	5a cf       	rjmp	.-332    	; 0x23a0 <app+0x21c>
				{
					activateAlarm();
    24ec:	0e 94 b3 14 	call	0x2966	; 0x2966 <activateAlarm>
					break;
				}
			}
			/* reset your wrong pass tries */
			passWrongCounter = 0;
    24f0:	10 92 23 01 	sts	0x0123, r1
    24f4:	7f ce       	rjmp	.-770    	; 0x21f4 <app+0x70>

000024f6 <countSec>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void countSec(void)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    24fe:	80 91 22 01 	lds	r24, 0x0122
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	80 93 22 01 	sts	0x0122, r24
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <getPassword>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void getPassword(uint8 * pass)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	62 97       	sbiw	r28, 0x12	; 18
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	9a 8b       	std	Y+18, r25	; 0x12
    2524:	89 8b       	std	Y+17, r24	; 0x11
	/* variable to store pressed key */
	uint8 keyPressed;
	/* counter variable for FOR Loop */
	uint8 i;
	LCD_clearScreen();
    2526:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
	LCD_displayString("plz enter pass:");
    2532:	8f e9       	ldi	r24, 0x9F	; 159
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
	LCD_moveCursor(1, 0);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
	/* loop to get the password */
	for(i=0;i<PASSWORD_SIZE;i++)
    2542:	1f 86       	std	Y+15, r1	; 0x0f
    2544:	91 c0       	rjmp	.+290    	; 0x2668 <getPassword+0x15a>
	{
		do
		{
			keyPressed = KEYPAD_getPressedKey();
    2546:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <KEYPAD_getPressedKey>
    254a:	88 8b       	std	Y+16, r24	; 0x10
		}while(keyPressed > 9);
    254c:	88 89       	ldd	r24, Y+16	; 0x10
    254e:	8a 30       	cpi	r24, 0x0A	; 10
    2550:	d0 f7       	brcc	.-12     	; 0x2546 <getPassword+0x38>
		pass[i] = keyPressed;
    2552:	8f 85       	ldd	r24, Y+15	; 0x0f
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	89 89       	ldd	r24, Y+17	; 0x11
    255a:	9a 89       	ldd	r25, Y+18	; 0x12
    255c:	fc 01       	movw	r30, r24
    255e:	e2 0f       	add	r30, r18
    2560:	f3 1f       	adc	r31, r19
    2562:	88 89       	ldd	r24, Y+16	; 0x10
    2564:	80 83       	st	Z, r24
		LCD_intgerToString(keyPressed);
    2566:	88 89       	ldd	r24, Y+16	; 0x10
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_intgerToString>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	aa ef       	ldi	r26, 0xFA	; 250
    2576:	b3 e4       	ldi	r27, 0x43	; 67
    2578:	8b 87       	std	Y+11, r24	; 0x0b
    257a:	9c 87       	std	Y+12, r25	; 0x0c
    257c:	ad 87       	std	Y+13, r26	; 0x0d
    257e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2580:	6b 85       	ldd	r22, Y+11	; 0x0b
    2582:	7c 85       	ldd	r23, Y+12	; 0x0c
    2584:	8d 85       	ldd	r24, Y+13	; 0x0d
    2586:	9e 85       	ldd	r25, Y+14	; 0x0e
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a ef       	ldi	r20, 0xFA	; 250
    258e:	54 e4       	ldi	r21, 0x44	; 68
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	8f 83       	std	Y+7, r24	; 0x07
    259a:	98 87       	std	Y+8, r25	; 0x08
    259c:	a9 87       	std	Y+9, r26	; 0x09
    259e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <getPassword+0xb4>
		__ticks = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	3f c0       	rjmp	.+126    	; 0x2640 <getPassword+0x132>
	else if (__tmp > 65535)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	3f ef       	ldi	r19, 0xFF	; 255
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	57 e4       	ldi	r21, 0x47	; 71
    25d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	4c f5       	brge	.+82     	; 0x262c <getPassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25da:	6b 85       	ldd	r22, Y+11	; 0x0b
    25dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25de:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <getPassword+0x114>
    2604:	88 ec       	ldi	r24, 0xC8	; 200
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9c 83       	std	Y+4, r25	; 0x04
    260a:	8b 83       	std	Y+3, r24	; 0x03
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <getPassword+0x102>
    2614:	9c 83       	std	Y+4, r25	; 0x04
    2616:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	69 f7       	brne	.-38     	; 0x2604 <getPassword+0xf6>
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <getPassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262c:	6f 81       	ldd	r22, Y+7	; 0x07
    262e:	78 85       	ldd	r23, Y+8	; 0x08
    2630:	89 85       	ldd	r24, Y+9	; 0x09
    2632:	9a 85       	ldd	r25, Y+10	; 0x0a
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9e 83       	std	Y+6, r25	; 0x06
    263e:	8d 83       	std	Y+5, r24	; 0x05
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <getPassword+0x13e>
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_moveCursor(1, i);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	6f 85       	ldd	r22, Y+15	; 0x0f
    2658:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
		LCD_displayCharacter('*');
    265c:	8a e2       	ldi	r24, 0x2A	; 42
    265e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
	LCD_clearScreen();
	LCD_moveCursor(0, 0);
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	/* loop to get the password */
	for(i=0;i<PASSWORD_SIZE;i++)
    2662:	8f 85       	ldd	r24, Y+15	; 0x0f
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	8f 87       	std	Y+15, r24	; 0x0f
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	85 30       	cpi	r24, 0x05	; 5
    266c:	08 f4       	brcc	.+2      	; 0x2670 <getPassword+0x162>
    266e:	6b cf       	rjmp	.-298    	; 0x2546 <getPassword+0x38>
		_delay_ms(500);
		LCD_moveCursor(1, i);
		LCD_displayCharacter('*');
	}
	/* wait for the Enter */
	while(KEYPAD_getPressedKey() != 13);
    2670:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <KEYPAD_getPressedKey>
    2674:	8d 30       	cpi	r24, 0x0D	; 13
    2676:	e1 f7       	brne	.-8      	; 0x2670 <getPassword+0x162>
}
    2678:	62 96       	adiw	r28, 0x12	; 18
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <getPasswordConfirmation>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void getPasswordConfirmation(uint8 * pass)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	62 97       	sbiw	r28, 0x12	; 18
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	9a 8b       	std	Y+18, r25	; 0x12
    26a0:	89 8b       	std	Y+17, r24	; 0x11
	/* variable to store pressed key */
	uint8 keyPressed;
	/* counter variable for FOR Loop */
	uint8 i;
	LCD_clearScreen();
    26a2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
	LCD_displayString("plz re-enter the");
    26ae:	8f ea       	ldi	r24, 0xAF	; 175
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
	LCD_moveCursor(1, 0);
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
	LCD_displayString("same pass: ");
    26be:	80 ec       	ldi	r24, 0xC0	; 192
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
	/* loop to get the password Confirmation */
	for(i=0;i<PASSWORD_SIZE;i++)
    26c6:	1f 86       	std	Y+15, r1	; 0x0f
    26c8:	94 c0       	rjmp	.+296    	; 0x27f2 <getPasswordConfirmation+0x168>
	{
		do
		{
			keyPressed = KEYPAD_getPressedKey();
    26ca:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <KEYPAD_getPressedKey>
    26ce:	88 8b       	std	Y+16, r24	; 0x10
		}while(keyPressed > 9);
    26d0:	88 89       	ldd	r24, Y+16	; 0x10
    26d2:	8a 30       	cpi	r24, 0x0A	; 10
    26d4:	d0 f7       	brcc	.-12     	; 0x26ca <getPasswordConfirmation+0x40>
		pass[i] = keyPressed;
    26d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	89 89       	ldd	r24, Y+17	; 0x11
    26de:	9a 89       	ldd	r25, Y+18	; 0x12
    26e0:	fc 01       	movw	r30, r24
    26e2:	e2 0f       	add	r30, r18
    26e4:	f3 1f       	adc	r31, r19
    26e6:	88 89       	ldd	r24, Y+16	; 0x10
    26e8:	80 83       	st	Z, r24
		LCD_intgerToString(keyPressed);
    26ea:	88 89       	ldd	r24, Y+16	; 0x10
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_intgerToString>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	aa ef       	ldi	r26, 0xFA	; 250
    26fa:	b3 e4       	ldi	r27, 0x43	; 67
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <getPasswordConfirmation+0xbc>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <getPasswordConfirmation+0x13a>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <getPasswordConfirmation+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <getPasswordConfirmation+0x11c>
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <getPasswordConfirmation+0x10a>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <getPasswordConfirmation+0xfe>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <getPasswordConfirmation+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <getPasswordConfirmation+0x146>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_moveCursor(1, i+11);
    27d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27da:	98 2f       	mov	r25, r24
    27dc:	95 5f       	subi	r25, 0xF5	; 245
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	69 2f       	mov	r22, r25
    27e2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_moveCursor>
		LCD_displayCharacter('*');
    27e6:	8a e2       	ldi	r24, 0x2A	; 42
    27e8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
	LCD_moveCursor(0, 0);
	LCD_displayString("plz re-enter the");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass: ");
	/* loop to get the password Confirmation */
	for(i=0;i<PASSWORD_SIZE;i++)
    27ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ee:	8f 5f       	subi	r24, 0xFF	; 255
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
    27f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f4:	85 30       	cpi	r24, 0x05	; 5
    27f6:	08 f4       	brcc	.+2      	; 0x27fa <getPasswordConfirmation+0x170>
    27f8:	68 cf       	rjmp	.-304    	; 0x26ca <getPasswordConfirmation+0x40>
		_delay_ms(500);
		LCD_moveCursor(1, i+11);
		LCD_displayCharacter('*');
	}
	/* wait for the Enter */
	while(KEYPAD_getPressedKey() != 13);
    27fa:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <KEYPAD_getPressedKey>
    27fe:	8d 30       	cpi	r24, 0x0D	; 13
    2800:	e1 f7       	brne	.-8      	; 0x27fa <getPasswordConfirmation+0x170>
}
    2802:	62 96       	adiw	r28, 0x12	; 18
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <checkPasswordsMatching>:
[out]	-NONE
[in/out] -NONE
[Returns]: whether the passwords matched or not
------------------------------------------------------------------*/
uint8 checkPasswordsMatching(uint8 * pass1,uint8 * pass2)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <checkPasswordsMatching+0x6>
    281a:	00 d0       	rcall	.+0      	; 0x281c <checkPasswordsMatching+0x8>
    281c:	00 d0       	rcall	.+0      	; 0x281e <checkPasswordsMatching+0xa>
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	9b 83       	std	Y+3, r25	; 0x03
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	7d 83       	std	Y+5, r23	; 0x05
    2828:	6c 83       	std	Y+4, r22	; 0x04
	/* counter variable for FOR Loop */
	uint8 i;

	UART_sendByte(SETTING_UP_A_NEW_PASS);
    282a:	81 ef       	ldi	r24, 0xF1	; 241
    282c:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	/* send password 1 and password 2 through UART to check them */
	for(i=0;i<PASSWORD_SIZE;i++)
    2830:	19 82       	std	Y+1, r1	; 0x01
    2832:	0e c0       	rjmp	.+28     	; 0x2850 <checkPasswordsMatching+0x3c>
	{
		UART_sendByte(pass1[i]);
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	80 81       	ld	r24, Z
    2846:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	/* counter variable for FOR Loop */
	uint8 i;

	UART_sendByte(SETTING_UP_A_NEW_PASS);
	/* send password 1 and password 2 through UART to check them */
	for(i=0;i<PASSWORD_SIZE;i++)
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	85 30       	cpi	r24, 0x05	; 5
    2854:	78 f3       	brcs	.-34     	; 0x2834 <checkPasswordsMatching+0x20>
	{
		UART_sendByte(pass1[i]);
	}
	for(i=0;i<PASSWORD_SIZE;i++)
    2856:	19 82       	std	Y+1, r1	; 0x01
    2858:	0e c0       	rjmp	.+28     	; 0x2876 <checkPasswordsMatching+0x62>
	{
		UART_sendByte(pass2[i]);
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	9d 81       	ldd	r25, Y+5	; 0x05
    2864:	fc 01       	movw	r30, r24
    2866:	e2 0f       	add	r30, r18
    2868:	f3 1f       	adc	r31, r19
    286a:	80 81       	ld	r24, Z
    286c:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	/* send password 1 and password 2 through UART to check them */
	for(i=0;i<PASSWORD_SIZE;i++)
	{
		UART_sendByte(pass1[i]);
	}
	for(i=0;i<PASSWORD_SIZE;i++)
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	8f 5f       	subi	r24, 0xFF	; 255
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	85 30       	cpi	r24, 0x05	; 5
    287a:	78 f3       	brcs	.-34     	; 0x285a <checkPasswordsMatching+0x46>
	{
		UART_sendByte(pass2[i]);
	}
	if(UART_receiveByte() == NEW_PASS_SAVED)
    287c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_receiveByte>
    2880:	82 3f       	cpi	r24, 0xF2	; 242
    2882:	19 f4       	brne	.+6      	; 0x288a <checkPasswordsMatching+0x76>
		return TWO_PASSWORDS_MATCHED;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	8e 83       	std	Y+6, r24	; 0x06
    2888:	01 c0       	rjmp	.+2      	; 0x288c <checkPasswordsMatching+0x78>
	else
		return TWO_PASSWORDS_NOT_MATCHED;
    288a:	1e 82       	std	Y+6, r1	; 0x06
    288c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    288e:	26 96       	adiw	r28, 0x06	; 6
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <checkPassword>:
[out]	-NONE
[in/out] -NONE
[Returns]: whether the password is Right or Wrong
------------------------------------------------------------------*/
uint8 checkPassword(uint8 * pass)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <checkPassword+0x6>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <checkPassword+0x8>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
	/* counter variable for FOR Loop */
	uint8 i;

	UART_sendByte(PASS_CHECK);
    28b0:	83 ef       	ldi	r24, 0xF3	; 243
    28b2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	/* send the password through UART to check it */
	for(i=0;i<PASSWORD_SIZE;i++)
    28b6:	19 82       	std	Y+1, r1	; 0x01
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <checkPassword+0x36>
	{
		UART_sendByte(pass[i]);
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	9b 81       	ldd	r25, Y+3	; 0x03
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	80 81       	ld	r24, Z
    28cc:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	/* counter variable for FOR Loop */
	uint8 i;

	UART_sendByte(PASS_CHECK);
	/* send the password through UART to check it */
	for(i=0;i<PASSWORD_SIZE;i++)
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	85 30       	cpi	r24, 0x05	; 5
    28da:	78 f3       	brcs	.-34     	; 0x28ba <checkPassword+0x1a>
	{
		UART_sendByte(pass[i]);
	}
	if(UART_receiveByte() == PASS_CORRECT)
    28dc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_receiveByte>
    28e0:	84 3f       	cpi	r24, 0xF4	; 244
    28e2:	19 f4       	brne	.+6      	; 0x28ea <checkPassword+0x4a>
		return RIGHT_PASSWORD;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	8c 83       	std	Y+4, r24	; 0x04
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <checkPassword+0x4c>
	else
		return WRONG_PASSWORD;
    28ea:	1c 82       	std	Y+4, r1	; 0x04
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <openDoor>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void openDoor(void)
{
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62


	UART_sendByte(OPEN_DOOR);
    2904:	85 ef       	ldi	r24, 0xF5	; 245
    2906:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	LCD_clearScreen();
    290a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is");
    290e:	2c ec       	ldi	r18, 0xCC	; 204
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	a9 01       	movw	r20, r18
    2918:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Unlocking");
    291c:	24 ed       	ldi	r18, 0xD4	; 212
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	a9 01       	movw	r20, r18
    2926:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>
	delaySeconds(15);
    292a:	8f e0       	ldi	r24, 0x0F	; 15
    292c:	0e 94 cb 14 	call	0x2996	; 0x2996 <delaySeconds>

	LCD_clearScreen();
    2930:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Open");
    2934:	2e ed       	ldi	r18, 0xDE	; 222
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	a9 01       	movw	r20, r18
    293e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>
	delaySeconds(3);
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	0e 94 cb 14 	call	0x2996	; 0x2996 <delaySeconds>

	LCD_clearScreen();
    2948:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Locking");
    294c:	2b ee       	ldi	r18, 0xEB	; 235
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	a9 01       	movw	r20, r18
    2956:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>
	delaySeconds(15);
    295a:	8f e0       	ldi	r24, 0x0F	; 15
    295c:	0e 94 cb 14 	call	0x2996	; 0x2996 <delaySeconds>
}
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <activateAlarm>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void activateAlarm(void)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ACTIVATE_THE_ALERT);
    296e:	86 ef       	ldi	r24, 0xF6	; 246
    2970:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
	passWrongCounter = 0;
    2974:	10 92 23 01 	sts	0x0123, r1
	LCD_clearScreen();
    2978:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "!!!! ERROR !!!!");
    297c:	2b ef       	ldi	r18, 0xFB	; 251
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	a9 01       	movw	r20, r18
    2986:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayStringRowColumn>

	/* keep alert on for a minute */
	delaySeconds(60);
    298a:	8c e3       	ldi	r24, 0x3C	; 60
    298c:	0e 94 cb 14 	call	0x2996	; 0x2996 <delaySeconds>
}
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <delaySeconds>:
[out]	-NONE
[in/out] -NONE
[Returns]: Nothing
------------------------------------------------------------------*/
void delaySeconds(uint8 sec)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	2c 97       	sbiw	r28, 0x0c	; 12
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	8f 83       	std	Y+7, r24	; 0x07
	/* setting the callBack function to count seconds */
	Timer1_setCallBack(countSec);
    29ac:	8b e7       	ldi	r24, 0x7B	; 123
    29ae:	92 e1       	ldi	r25, 0x12	; 18
    29b0:	0e 94 54 07 	call	0xea8	; 0xea8 <Timer1_setCallBack>
	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1Config = {0,31250,CLK_256,COMPARE_MODE};
    29b4:	ce 01       	movw	r24, r28
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	99 87       	std	Y+9, r25	; 0x09
    29ba:	88 87       	std	Y+8, r24	; 0x08
    29bc:	ea e1       	ldi	r30, 0x1A	; 26
    29be:	f1 e0       	ldi	r31, 0x01	; 1
    29c0:	fb 87       	std	Y+11, r31	; 0x0b
    29c2:	ea 87       	std	Y+10, r30	; 0x0a
    29c4:	f6 e0       	ldi	r31, 0x06	; 6
    29c6:	fc 87       	std	Y+12, r31	; 0x0c
    29c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    29ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    29cc:	00 80       	ld	r0, Z
    29ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	9b 87       	std	Y+11, r25	; 0x0b
    29d6:	8a 87       	std	Y+10, r24	; 0x0a
    29d8:	e8 85       	ldd	r30, Y+8	; 0x08
    29da:	f9 85       	ldd	r31, Y+9	; 0x09
    29dc:	00 82       	st	Z, r0
    29de:	88 85       	ldd	r24, Y+8	; 0x08
    29e0:	99 85       	ldd	r25, Y+9	; 0x09
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	99 87       	std	Y+9, r25	; 0x09
    29e6:	88 87       	std	Y+8, r24	; 0x08
    29e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ea:	91 50       	subi	r25, 0x01	; 1
    29ec:	9c 87       	std	Y+12, r25	; 0x0c
    29ee:	ec 85       	ldd	r30, Y+12	; 0x0c
    29f0:	ee 23       	and	r30, r30
    29f2:	51 f7       	brne	.-44     	; 0x29c8 <delaySeconds+0x32>

	Timer1_init(&timer1Config);
    29f4:	ce 01       	movw	r24, r28
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	0e 94 f1 06 	call	0xde2	; 0xde2 <Timer1_init>
	while(g_sec < sec);
    29fc:	90 91 22 01 	lds	r25, 0x0122
    2a00:	8f 81       	ldd	r24, Y+7	; 0x07
    2a02:	98 17       	cp	r25, r24
    2a04:	d8 f3       	brcs	.-10     	; 0x29fc <delaySeconds+0x66>
	g_sec = 0;
    2a06:	10 92 22 01 	sts	0x0122, r1
	Timer1_deInit();
    2a0a:	0e 94 3c 07 	call	0xe78	; 0xe78 <Timer1_deInit>

}
    2a0e:	2c 96       	adiw	r28, 0x0c	; 12
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <main>:
#include "app.h"

int main(void)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	app();
    2a28:	0e 94 c2 10 	call	0x2184	; 0x2184 <app>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
}
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <__udivmodsi4>:
    2a36:	a1 e2       	ldi	r26, 0x21	; 33
    2a38:	1a 2e       	mov	r1, r26
    2a3a:	aa 1b       	sub	r26, r26
    2a3c:	bb 1b       	sub	r27, r27
    2a3e:	fd 01       	movw	r30, r26
    2a40:	0d c0       	rjmp	.+26     	; 0x2a5c <__udivmodsi4_ep>

00002a42 <__udivmodsi4_loop>:
    2a42:	aa 1f       	adc	r26, r26
    2a44:	bb 1f       	adc	r27, r27
    2a46:	ee 1f       	adc	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	a2 17       	cp	r26, r18
    2a4c:	b3 07       	cpc	r27, r19
    2a4e:	e4 07       	cpc	r30, r20
    2a50:	f5 07       	cpc	r31, r21
    2a52:	20 f0       	brcs	.+8      	; 0x2a5c <__udivmodsi4_ep>
    2a54:	a2 1b       	sub	r26, r18
    2a56:	b3 0b       	sbc	r27, r19
    2a58:	e4 0b       	sbc	r30, r20
    2a5a:	f5 0b       	sbc	r31, r21

00002a5c <__udivmodsi4_ep>:
    2a5c:	66 1f       	adc	r22, r22
    2a5e:	77 1f       	adc	r23, r23
    2a60:	88 1f       	adc	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	1a 94       	dec	r1
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <__udivmodsi4_loop>
    2a68:	60 95       	com	r22
    2a6a:	70 95       	com	r23
    2a6c:	80 95       	com	r24
    2a6e:	90 95       	com	r25
    2a70:	9b 01       	movw	r18, r22
    2a72:	ac 01       	movw	r20, r24
    2a74:	bd 01       	movw	r22, r26
    2a76:	cf 01       	movw	r24, r30
    2a78:	08 95       	ret

00002a7a <__prologue_saves__>:
    2a7a:	2f 92       	push	r2
    2a7c:	3f 92       	push	r3
    2a7e:	4f 92       	push	r4
    2a80:	5f 92       	push	r5
    2a82:	6f 92       	push	r6
    2a84:	7f 92       	push	r7
    2a86:	8f 92       	push	r8
    2a88:	9f 92       	push	r9
    2a8a:	af 92       	push	r10
    2a8c:	bf 92       	push	r11
    2a8e:	cf 92       	push	r12
    2a90:	df 92       	push	r13
    2a92:	ef 92       	push	r14
    2a94:	ff 92       	push	r15
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	ca 1b       	sub	r28, r26
    2aa4:	db 0b       	sbc	r29, r27
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	09 94       	ijmp

00002ab2 <__epilogue_restores__>:
    2ab2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ab4:	39 88       	ldd	r3, Y+17	; 0x11
    2ab6:	48 88       	ldd	r4, Y+16	; 0x10
    2ab8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aba:	6e 84       	ldd	r6, Y+14	; 0x0e
    2abc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2abe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ac0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ac2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ac4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ac6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac8:	df 80       	ldd	r13, Y+7	; 0x07
    2aca:	ee 80       	ldd	r14, Y+6	; 0x06
    2acc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ace:	0c 81       	ldd	r16, Y+4	; 0x04
    2ad0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ad2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ad6:	ce 0f       	add	r28, r30
    2ad8:	d1 1d       	adc	r29, r1
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	ed 01       	movw	r28, r26
    2ae6:	08 95       	ret

00002ae8 <itoa>:
    2ae8:	fb 01       	movw	r30, r22
    2aea:	9f 01       	movw	r18, r30
    2aec:	e8 94       	clt
    2aee:	42 30       	cpi	r20, 0x02	; 2
    2af0:	c4 f0       	brlt	.+48     	; 0x2b22 <itoa+0x3a>
    2af2:	45 32       	cpi	r20, 0x25	; 37
    2af4:	b4 f4       	brge	.+44     	; 0x2b22 <itoa+0x3a>
    2af6:	4a 30       	cpi	r20, 0x0A	; 10
    2af8:	29 f4       	brne	.+10     	; 0x2b04 <itoa+0x1c>
    2afa:	97 fb       	bst	r25, 7
    2afc:	1e f4       	brtc	.+6      	; 0x2b04 <itoa+0x1c>
    2afe:	90 95       	com	r25
    2b00:	81 95       	neg	r24
    2b02:	9f 4f       	sbci	r25, 0xFF	; 255
    2b04:	64 2f       	mov	r22, r20
    2b06:	77 27       	eor	r23, r23
    2b08:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__udivmodhi4>
    2b0c:	80 5d       	subi	r24, 0xD0	; 208
    2b0e:	8a 33       	cpi	r24, 0x3A	; 58
    2b10:	0c f0       	brlt	.+2      	; 0x2b14 <itoa+0x2c>
    2b12:	89 5d       	subi	r24, 0xD9	; 217
    2b14:	81 93       	st	Z+, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	a1 f7       	brne	.-24     	; 0x2b04 <itoa+0x1c>
    2b1c:	16 f4       	brtc	.+4      	; 0x2b22 <itoa+0x3a>
    2b1e:	5d e2       	ldi	r21, 0x2D	; 45
    2b20:	51 93       	st	Z+, r21
    2b22:	10 82       	st	Z, r1
    2b24:	c9 01       	movw	r24, r18
    2b26:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <strrev>

00002b2a <strrev>:
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	67 2f       	mov	r22, r23
    2b30:	71 91       	ld	r23, Z+
    2b32:	77 23       	and	r23, r23
    2b34:	e1 f7       	brne	.-8      	; 0x2b2e <strrev+0x4>
    2b36:	32 97       	sbiw	r30, 0x02	; 2
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <strrev+0x18>
    2b3a:	7c 91       	ld	r23, X
    2b3c:	6d 93       	st	X+, r22
    2b3e:	70 83       	st	Z, r23
    2b40:	62 91       	ld	r22, -Z
    2b42:	ae 17       	cp	r26, r30
    2b44:	bf 07       	cpc	r27, r31
    2b46:	c8 f3       	brcs	.-14     	; 0x2b3a <strrev+0x10>
    2b48:	08 95       	ret

00002b4a <__udivmodhi4>:
    2b4a:	aa 1b       	sub	r26, r26
    2b4c:	bb 1b       	sub	r27, r27
    2b4e:	51 e1       	ldi	r21, 0x11	; 17
    2b50:	07 c0       	rjmp	.+14     	; 0x2b60 <__udivmodhi4_ep>

00002b52 <__udivmodhi4_loop>:
    2b52:	aa 1f       	adc	r26, r26
    2b54:	bb 1f       	adc	r27, r27
    2b56:	a6 17       	cp	r26, r22
    2b58:	b7 07       	cpc	r27, r23
    2b5a:	10 f0       	brcs	.+4      	; 0x2b60 <__udivmodhi4_ep>
    2b5c:	a6 1b       	sub	r26, r22
    2b5e:	b7 0b       	sbc	r27, r23

00002b60 <__udivmodhi4_ep>:
    2b60:	88 1f       	adc	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	5a 95       	dec	r21
    2b66:	a9 f7       	brne	.-22     	; 0x2b52 <__udivmodhi4_loop>
    2b68:	80 95       	com	r24
    2b6a:	90 95       	com	r25
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	08 95       	ret

00002b72 <_exit>:
    2b72:	f8 94       	cli

00002b74 <__stop_program>:
    2b74:	ff cf       	rjmp	.-2      	; 0x2b74 <__stop_program>
